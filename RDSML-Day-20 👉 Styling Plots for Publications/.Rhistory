x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect<- c(foo = 11, bar = 2, norf =NA)
vect
names(vect)
vect2<-c(11,2,NA)
vect2<- c("foo", "bar", "norf")
names(vect2)<- c("foo", "bar", "norf")
identical()
identical(vect=vect2)
identical(vect, vect2)
vect["bar"]
vect["foo", "bar"]
vect[c("foo", "bar")]
swirl()
my_vector<- c(1:20)
my_vector<-[1:20]
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<- my_vector
?matrix()
?matrix
my_matrix<- [1:20, nrow=4, ncol=5]
my_matrix<- 1:20
my_matrix2<- 1:20
my_matrix2<- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
names(nrow= "bill", "Gina", "Kelly", "Sean")
`rownames<-`("bill", "Gina", "Kelly", "Sean")
patients<- rownames("bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("bill", "Gina", "Kelly", "Sean")
patients<-rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
info()
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
swirl()
cube(3)
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {x <- 0}
f <- function(x) {
g <- function(y) {y + z}
z <- 4
x + g(x)}
cube(3)
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {    g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
+     g <- function(y) {y + z}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
g <- function(y)
{y + z}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y)
{y + z}
z <- 4
x + g(x)
}
g <- function(y)
{y + z}
z <- 4
x + g(x)
z<-10
f(3)
x<-5
y<-if(x<3){
NA
}else{
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
if(x>3){
y<-10
}else{
y<-0
}
if(x>3){
y<-10
}else{
y<-0
}
if(x>3){
y<-10
} else {
y<-0
}
if(x>3){
y<-10
} else {
y<-0
}
if(x>3)
y<-10
if (x < 10) {
print("x is less than 10")
} else if (x >= 10 && x <= 20) {
print("x is between 10 and 20")
} else {
print("x is greater than 20")
}
x<-15
if (x < 10) {
print("x is less than 10")
} else if (x >= 10 && x <= 20) {
print("x is between 10 and 20")
} else {
print("x is greater than 20")
}
x=3
if(x>3){
y=10
} else{
y=0
}
print(x+y)
for(i in 1:10)
print(i)
for(i in 1:10)
print(i)
x= c("a", "b", "c", "d")
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (in in 1:4) print(x[i])
print(x[i])
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (in in 1:4) print(x[i])
for (i in 1:4)print(x[i])
#for nested loops
x=matrix(1:6, 2,3)
x
x=matrix(1:6, 2,3)
x
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
for (j in seq_len(ncol(x))) {
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
count=0
while (count<10) {
print(count)
count= count+1
count=0
while (count<10) {
print(count)
count= count+1
}
print(count)
count= count+1
count= count+1
}
count=0
while (count<10) {
print(count)
z=5
while(z>3 && z<=10){
print(z)
}
z=5
while(z>3 && z<=10){
print(z)
coil= rbinom(1,1,0.5)
if(coin=1)
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin=1)
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,1,0.5)
if(coin==1){
z=z+1
}else{
z=z-1
}
}
x=Sys.time()
x
p=as.POSIXlt(x)
p
p
names(unclass(p))
1
p$sec
p$min
p$hour
x=strptime(datestring, "%B, %d, %Y %H:%M")
x=strptime(datestring, "%B, %d, %Y %H:%M")
datestring=c("January 10, 2012 10:40", "December 9, 2011 9:10")
x=strptime(datestring, "%B, %d, %Y %H:%M")
x
datestring=c("January 10, 2012 10:40", "December 9, 2011 9:10")
x=strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x=as.Date("2012-01-01")
y=strptime("9 Jan 2011 11:34:21", "%d %b %y %H:%M;%S")
x-y
x=as.POSIXlt(x)
x-y
x=as.POSIXlt(X)
X=as.Date("2012-01-01")
y=strptime("9 Jan 2011 11:34:21", "%d %b %y %H:%M;%S")
x=as.POSIXlt(X)
x-y
y=as.Date("2012-02-28")
x-y
x=as.Date("2012-03-01")
y=as.Date("2012-02-28")
x-y
x=as.POSIXct("2012-10-25 01:00:00")
y=as.POSIXct("2012-10-25 06:00:00", tz="GMT")
x-y
y-x
Toothdata
ToothGrowth
data
data
Tdata=ToothGrowth
data
Tdata
View(Tdata)
setwd("E:/R code NBICT LAB/R-for-Data-Science-and-Machine-Learning-with-NBICTLAB-Batch8/RDSML-Day-20 ðŸ‘‰ Styling Plots for Publications")
#Styling plot for publication
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
install.packages("viridis")
library(viridis)
#Sample data load
df= mtcars
View(df)
ggplot(df, aes(x=wt, y=mpg))+
geom_point()
ggplot(df, aes(x=wt, y=mpg, color=cyl))+
geom_point()
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point()
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point()
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point()
#Styling plot for publication
library(ggplot2)
#install.packages("ggthemes")
library(ggthemes)
#install.packages("viridis")
library(viridis)
#Sample data load
df= mtcars
df$cyl =as.factor(df$cyl)
#styling plot
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point()
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name=cylinders)
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic()
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 10)
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14)
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold"))
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16))
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5))
df= mtcars
df$cyl =as.factor(df$cyl)
#styling plot
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5)
axis.title = element_text(face="bold", size=14),
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5),
axis.title = element_text(face="bold", size=14),
axis.text=element_text(size=12),
legend.position = "top" )
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5),
axis.title = element_text(face="bold", size=14),
axis.text=element_text(size=12),
legend.position = "right",
legend.title = element_text(face="bold")
)
ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5),
axis.title = element_text(face="bold", size=14),
axis.text=element_text(size=12),
legend.position = "right",
legend.title = element_text(face="bold"),
legend.text = element_text(size=12)
)
plot= ggplot(df, aes(x=wt, y=mpg, color = cyl))+
geom_point(size=3)+
scale_color_viridis_d(name="cylinders")+
labs(
title = "Fuel Efficiancy by car weight",
x= "weight (1000 lbs)",
y= "Miles per Gallon")+
theme_classic(base_size = 14, base_family = "serif")+
theme(plot.title = element_text(face="bold", size=16, hjust =0.5),
axis.title = element_text(face="bold", size=14),
axis.text=element_text(size=12),
legend.position = "right",
legend.title = element_text(face="bold"),
legend.text = element_text(size=12)
)
plot
ggsave("publication_ggplot.png", plot, width=6, height= 4, dpi=300)
