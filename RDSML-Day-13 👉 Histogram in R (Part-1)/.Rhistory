write.csv(get_eigenvalue(pca_result), "pca_eigenvalues.csv")
write.csv(get_pca_var(pca_result)$contrib, "variable_contributions.csv")
# Load required packages
library(readxl)
library(FactoMineR)
library(factoextra)
# 1. Read the data WITH headers
mn_data <- read_excel("MN_M for PCA.xlsx", sheet = "MN habit", col_names = TRUE)
# 2. Remove any empty rows or columns
mn_data <- mn_data[rowSums(is.na(mn_data)) < ncol(mn_data), ]
mn_data <- mn_data[, colSums(is.na(mn_data)) < nrow(mn_data)]
# 3. Convert from tibble to data frame and properly extract columns
mn_data <- as.data.frame(mn_data)
metal_data <- data.frame(
Sample = as.character(mn_data[[1]]),  # Use [[ ]] to extract column
Fe = as.numeric(mn_data[[2]]),
Zn = as.numeric(mn_data[[3]]),
Pb = as.numeric(mn_data[[4]]),
Cr = as.numeric(mn_data[[5]]),
Ni = as.numeric(mn_data[[6]]),
Mn = as.numeric(mn_data[[7]]),
Cd = as.numeric(mn_data[[8]]),
stringsAsFactors = FALSE
)
# 4. Set row names and remove Sample column
rownames(metal_data) <- metal_data$Sample
metal_data <- metal_data[, -1, drop = FALSE]  # Remove Sample column
# 5. Check for any NA values that might have been introduced
if(any(is.na(metal_data))) {
warning("NA values found - please check your data for non-numeric values")
print(metal_data[!complete.cases(metal_data), ])
}
# 6. Perform PCA
pca_result <- PCA(metal_data, graph = FALSE, scale.unit = TRUE)
# 7. Visualizations
# Scree plot
fviz_eig(pca_result, addlabels = TRUE,
main = "Variance Explained by PCA Components")
# Modify variable plot
var_plot <- fviz_pca_var(pca_result) +
labs(x = "PC1", y = "PC2", title = "Variable Loadings")
# Modify sample plot
ind_plot <- fviz_pca_ind(pca_result) +
labs(x = "PC1", y = "PC2", title = "Sample Scores")
# Modify biplot
biplot <- fviz_pca_biplot(pca_result) +
labs(x = "PC1", y = "PC2", title = "PCA Biplot")
# Variable contribution plot
fviz_pca_var(pca_result, col.var = "contrib",
gradient.cols = c("blue", "yellow", "red"),
repel = TRUE,
title = "Metal Contributions to PCA")
# Sample plot with labels
fviz_pca_ind(pca_result, label = "all", repel = TRUE,
title = "Sample Positions in PCA Space")
# Biplot
fviz_pca_biplot(pca_result, repel = TRUE,
col.ind = "#666666", col.var = "#FF0000",
title = "PCA Biplot: Metals and Samples")
# 8. Save results
write.csv(get_eigenvalue(pca_result), "pca_eigenvalues.csv")
write.csv(get_pca_var(pca_result)$contrib, "variable_contributions.csv")
# Modify variable plot
var_plot <- fviz_pca_var(pca_result) +
labs(x = "PC1", y = "PC2", title = "Variable Loadings")
# Modify sample plot
ind_plot <- fviz_pca_ind(pca_result) +
labs(x = "PC1", y = "PC2", title = "Sample Scores")
# Modify biplot
biplot <- fviz_pca_biplot(pca_result) +
labs(x = "PC1", y = "PC2", title = "PCA Biplot")
# Variable contribution plot
fviz_pca_var(pca_result, col.var = "contrib",
gradient.cols = c("blue", "yellow", "red"),
repel = TRUE,
title = "Metal Contributions to PCA")
# Sample plot with labels
fviz_pca_ind(pca_result, label = "all", repel = TRUE,
title = "Sample Positions in PCA Space")
write.csv(get_pca_var(pca_result)$contrib, "variable_contributions.csv")
swirl::install_course_directory()
swirl()
swirl()
swirl(datasciencecoursera)
install.packages("swirl")
swirl()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
1
swirl()
num_vect = c(0.5,55,-10, 6)
num_vect = 0.5,55,-10,6
num_vect = c(0.5,55,-10,6)
num_vect<- c(0.5, 55, -10, 6)
tf<- num_vect-1
tf<- num_vect<1
tf
num_vect>=6
my_char<- c("MY", "name", "is")
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse = "My", "name", "is")
paste(my_char, collapse = "My name is")
paste(my_char, collapse = "My", "name", "is")
paste(my_char, collapse = " ")
my_name<-c(my_char, "Azizul Hakim")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste( c(1:3), c("x","y")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(c(1,2,3), "X", "Y", "Z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:26, sep = "-")
paste(LETTERS, 1:4, sep = "-")
install.packages("swirl")
library(swirl)
swirl()
x<- c(44, NA, 5, NA)
x*3
y<- rnorm(1000)
z<- rep(NA, 1000)
my_data<-sample(c(y,z),100)
my_na<- is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x), x>0]
x[!is.na(x) & x > 0]
x[c(1,5,7)]
x[1:10, c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect<- c(foo = 11, bar = 2, norf =NA)
vect
names(vect)
vect2<-c(11,2,NA)
vect2<- c("foo", "bar", "norf")
names(vect2)<- c("foo", "bar", "norf")
identical()
identical(vect=vect2)
identical(vect, vect2)
vect["bar"]
vect["foo", "bar"]
vect[c("foo", "bar")]
swirl()
my_vector<- c(1:20)
my_vector<-[1:20]
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<- my_vector
?matrix()
?matrix
my_matrix<- [1:20, nrow=4, ncol=5]
my_matrix<- 1:20
my_matrix2<- 1:20
my_matrix2<- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
names(nrow= "bill", "Gina", "Kelly", "Sean")
`rownames<-`("bill", "Gina", "Kelly", "Sean")
patients<- rownames("bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("bill", "Gina", "Kelly", "Sean")
patients<-rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
rownames(my_matrix2)<-c("Bill", "Gina", "Kelly", "Sean")
info()
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
swirl()
cube(3)
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {x <- 0}
f <- function(x) {
g <- function(y) {y + z}
z <- 4
x + g(x)}
cube(3)
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {    g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
+     g <- function(y) {y + z}
f <- function(x) {
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
+     g <- function(y) {y + z}
+     z <- 4
+     x + g(x)}
f <- function(x) {
g <- function(y)
{y + z}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y)
{y + z}
z <- 4
x + g(x)
}
g <- function(y)
{y + z}
z <- 4
x + g(x)
z<-10
f(3)
x<-5
y<-if(x<3){
NA
}else{
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
if(x>3){
y<-10
}else{
y<-0
}
if(x>3){
y<-10
}else{
y<-0
}
if(x>3){
y<-10
} else {
y<-0
}
if(x>3){
y<-10
} else {
y<-0
}
if(x>3)
y<-10
if (x < 10) {
print("x is less than 10")
} else if (x >= 10 && x <= 20) {
print("x is between 10 and 20")
} else {
print("x is greater than 20")
}
x<-15
if (x < 10) {
print("x is less than 10")
} else if (x >= 10 && x <= 20) {
print("x is between 10 and 20")
} else {
print("x is greater than 20")
}
x=3
if(x>3){
y=10
} else{
y=0
}
print(x+y)
for(i in 1:10)
print(i)
for(i in 1:10)
print(i)
x= c("a", "b", "c", "d")
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (in in 1:4) print(x[i])
print(x[i])
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (in in 1:4) print(x[i])
for (i in 1:4)print(x[i])
#for nested loops
x=matrix(1:6, 2,3)
x
x=matrix(1:6, 2,3)
x
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
for (j in seq_len(ncol(x))) {
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
}
}
count=0
while (count<10) {
print(count)
count= count+1
count=0
while (count<10) {
print(count)
count= count+1
}
print(count)
count= count+1
count= count+1
}
count=0
while (count<10) {
print(count)
z=5
while(z>3 && z<=10){
print(z)
}
z=5
while(z>3 && z<=10){
print(z)
coil= rbinom(1,1,0.5)
if(coin=1)
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin=1)
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while(z>3 && z<=10){
print(z)
coin= rbinom(1,1,0.5)
if(coin==1)
z=z+1}
}else{
z=5
while (z>=3 && z<=10) {
print(z)
coin=rbinom(1,1,0.5)
if(coin==1){
z=z+1
}else{
z=z-1
}
}
setwd("E:/R code NBICT LAB/R-for-Data-Science-and-Machine-Learning-with-NBICTLAB-Batch8/RDSML-Day-13 ðŸ‘‰ Histogram in R (Part-1)")
#importing the data set
dataset= read.csv("data.csv")
View(dataset)
#importing the library
library(ggplot2)
#Basic histogram using ggplot2
ggplot()
#Basic histogram using ggplot2
ggplot(dataset, aes())
#Basic histogram using ggplot2
ggplot(dataset, aes(x=weight))+
geom_histogram()
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 2)
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 1)
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 0.5)
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 0.75)
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 0.75, color="black")
#Changing the width of bins
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 1.25, color="black")
#Changing colors
ggplot(dataset, aes(x=weight))+
geom_histogram(binwidth = 1.25, color="black", fill="white")
#Adding the mean line
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(color="black", fill="white")
histoplot
histoplot+geom_vline(aes(xintercept=mean(weight))
color="blue")
histoplot+geom_vline(aes(xintercept=mean(weight))
color="blue")
histoplot+geom_vline(aes(xintercept=mean(weight))+
color="blue")
histoplot+geom_vline(aes(xintercept=mean(weight))+color="blue")
histoplot+geom_vline(aes(xintercept=mean(weight))+color="red")
histoplot+geom_vline(aes(xintercept=mean(weight)),color="red")
histoplot+geom_vline(aes(xintercept=mean(weight)),
color="red", linetype="dashed")
histoplot+geom_vline(aes(xintercept=mean(weight)),
color="red", linetype="dashed", size=1.5)
histoplot+geom_vline(aes(xintercept=mean(weight)),
color="red", linetype="dashed", size=1)
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(aes(y=after_stat(density)),color="black", fill="white")
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(aes(y=after_stat(density)),color="black", fill="white")+
geom_density()
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(aes(y=after_stat(density)),color="black", fill="white")+
geom_density()
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(aes(y=after_stat(density)),color="black", fill="white")+
geom_density()
histoplot= ggplot(dataset, aes(x=weight))+
geom_histogram(aes(y=after_stat(density)),color="black", fill="white")+
geom_density()
# Histogram with density plot
ggplot(dataset, aes(x = weight))+
geom_histogram(aes(y = after_stat(density)), color = "black", fill = "white")+
geom_density(fill = "red", alpha = .2)
#Changing line color and fill color
ggplot(dataset, aes(x = weight))+
geom_histogram(color = "darkblue", fill = "lightblue")
